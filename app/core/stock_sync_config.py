try:
    from pydantic_settings import BaseSettings
except ImportError:
    # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π pydantic
    from pydantic import BaseSettings
from typing import Dict, Any


class StockSyncConfig(BaseSettings):
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º STOCK_SYNC_
    """
    TELEGRAM_MAIN_CHAT_ID: int = None
    TELEGRAM_CRITICAL_CHAT_ID: int = None
    TELEGRAM_TECHNICAL_CHAT_ID: int = None

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry –º–µ—Ö–∞–Ω–∏–∑–º–∞
    retry_max_attempts: int = 5
    retry_initial_delay: int = 60  # —Å–µ–∫—É–Ω–¥—ã
    retry_max_delay: int = 3600   # —Å–µ–∫—É–Ω–¥—ã (1 —á–∞—Å)
    retry_exponential_base: float = 2.0
    retry_jitter: bool = True
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ reconciliation (—Å–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
    reconciliation_interval_minutes: int = 30
    reconciliation_batch_size: int = 100
    reconciliation_auto_fix_threshold_hours: int = 24
    reconciliation_enabled: bool = True
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤
    monitoring_alert_on_failed_retries: bool = True
    monitoring_max_pending_operations: int = 1000
    monitoring_stale_operation_hours: int = 6
    monitoring_health_check_interval_minutes: int = 30
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    alerts_enabled: bool = True
    alerts_critical_shortage: bool = True
    alerts_sync_failures: bool = True
    alerts_system_health: bool = True
    alerts_daily_reports: bool = True
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    processing_batch_size: int = 50
    processing_timeout_seconds: int = 30
    processing_concurrent_workers: int = 3
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    cleanup_completed_operations_days: int = 30
    cleanup_failed_operations_days: int = 90
    cleanup_logs_days: int = 60
    
    validation_low_stock_threshold: int = 5

    model_config = {
        "env_prefix": "STOCK_SYNC_",
        "env_file": ".env.docker",
        "extra": "ignore"  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ .env
    }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
stock_sync_config = StockSyncConfig()


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
class AlertTypes:
    """–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    CRITICAL = "critical"
    WARNING = "warning" 
    INFO = "info"
    NORMAL = "normal"


class AlertPriorities:
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏."""
    HIGH = "high"       # –¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
    MEDIUM = "medium"   # –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
    LOW = "low"         # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç


# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ALERT_TEMPLATES = {
    "stock_shortage": {
        "title": "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ö –¢–û–í–ê–†–ê –ù–ê –°–ö–õ–ê–î–ï",
        "priority": AlertPriorities.HIGH,
        "template": """
üë§ –ê–∫–∫–∞—É–Ω—Ç: **{account_name}**
üì¶ SKU: {sku}
üìã –ó–∞–∫–∞–∑: {order_id}
üè™ –°–∫–ª–∞–¥: {warehouse}
üìä –¢—Ä–µ–±—É–µ—Ç—Å—è: {required} —à—Ç.
üìä –î–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.
‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞–µ—Ç: {shortage} —à—Ç.
üïê –í—Ä–µ–º—è: {timestamp}

üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞!
        """
    },
    "sync_failure": {
        "title": "üîÑ –°–ë–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò",
        "priority": AlertPriorities.MEDIUM,
        "template": """
üë§ –ê–∫–∫–∞—É–Ω—Ç: **{account_name}**
üè∑Ô∏è SKU: {sku}
üìã –ó–∞–∫–∞–∑: {order_id}
üÜî –û–ø–µ—Ä–∞—Ü–∏—è: {operation_id}
üîÅ –ü–æ–ø—ã—Ç–∫–∞: {retry_count}
‚ùå –û—à–∏–±–∫–∞: {error_message}
üïê {timestamp}

üîß –î–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å Allegro
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - —Ä—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        """
    },
    "system_health": {
        "title": "üìä –°–¢–ê–¢–£–° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò",
        "priority": AlertPriorities.LOW,
        "template": """
‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: **{pending_operations}** –æ–ø–µ—Ä–∞—Ü–∏–π
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: **{failed_operations}** –æ–ø–µ—Ä–∞—Ü–∏–π
üêå –ó–∞—Å—Ç—Ä—è–≤—à–∏—Ö: **{stale_operations}** –æ–ø–µ—Ä–∞—Ü–∏–π
üïê {timestamp}
        """
    },
    "reconciliation_discrepancy": {
        "title": "‚öñÔ∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –í –î–ê–ù–ù–´–•",
        "priority": AlertPriorities.HIGH,
        "template": """
üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders_checked}
‚ùå –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: **{discrepancies_count}**
üè¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ: **{accounts_affected}**
üïê {timestamp}

üîß **–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!**
        """
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
ENVIRONMENT_CONFIGS = {
    "development": {
        "retry_max_attempts": 3,
        "retry_initial_delay": 30,
        "monitoring_max_pending_operations": 100,
        "alerts_enabled": True,
        "reconciliation_interval_minutes": 60
    },
    "staging": {
        "retry_max_attempts": 4,
        "retry_initial_delay": 45,
        "monitoring_max_pending_operations": 500,
        "alerts_enabled": True,
        "reconciliation_interval_minutes": 45
    },
    "production": {
        "retry_max_attempts": 5,
        "retry_initial_delay": 60,
        "monitoring_max_pending_operations": 1000,
        "alerts_enabled": True,
        "reconciliation_interval_minutes": 30
    }
}


def get_environment_config(env: str = "production") -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    
    Args:
        env: –ò–º—è —Å—Ä–µ–¥—ã (development, staging, production)
        
    Returns:
        Dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
    """
    return ENVIRONMENT_CONFIGS.get(env, ENVIRONMENT_CONFIGS["production"])


def update_config_for_environment(env: str = "production") -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã.
    
    Args:
        env: –ò–º—è —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    env_config = get_environment_config(env)
    
    for key, value in env_config.items():
        if hasattr(stock_sync_config, key):
            setattr(stock_sync_config, key, value)