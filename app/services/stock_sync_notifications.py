import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from uuid import UUID
from sqlmodel import Session, select

from app.services.tg_client import TelegramManager
from app.core.stock_sync_config import stock_sync_config
from app.models.stock_synchronization import OrderNotificationTracker
from app.schemas.stock_synchronization import (
    SyncResult,
    ProcessingResult,
    ReconciliationResult,
    StockValidationResult
)


class StockSyncNotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    
    def __init__(self, session: Optional[Session] = None):
        self.session = session
        self.logger = logging.getLogger("stock.notifications")
        self.config = stock_sync_config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._managers = {}
        self._init_telegram_managers()
    
    def _init_telegram_managers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø."""
        try:
            # –ì–ª–∞–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if self.config.telegram_main_chat_id:
                self._managers['main'] = TelegramManager(
                    chat_id=self.config.telegram_main_chat_id
                )
            
            # –ì—Ä—É–ø–ø–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
            if self.config.telegram_critical_chat_id:
                self._managers['critical'] = TelegramManager(
                    chat_id=self.config.telegram_critical_chat_id
                )
            
            # –ì—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if self.config.telegram_tech_chat_id:
                self._managers['tech'] = TelegramManager(
                    chat_id=self.config.telegram_tech_chat_id
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
    
    def _send_message(
        self, 
        message: str, 
        chat_type: str = 'main',
        priority: str = 'normal',
        account_name: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_type: –¢–∏–ø —á–∞—Ç–∞ ('main', 'critical', 'tech')
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ('low', 'normal', 'high', 'critical')
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Ç–∞
            manager = self._managers.get(chat_type)
            if not manager:
                self.logger.warning(f"Telegram –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —á–∞—Ç–∞ '{chat_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                # Fallback –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —á–∞—Ç
                manager = self._managers.get('main')
                if not manager:
                    self.logger.error("–ù–∏ –æ–¥–∏–Ω Telegram –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–º
            formatted_message = self._format_message(message, priority, account_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = manager.send_message(formatted_message)
            
            if result:
                self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç '{chat_type}': {account_name or '–æ–±—â–µ–µ'}")
                return True
            else:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç '{chat_type}'")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _format_message(
        self, 
        message: str, 
        priority: str, 
        account_name: Optional[str]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π."""
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priority_emoji = {
            'low': '‚ÑπÔ∏è',
            'normal': 'üìä', 
            'high': '‚ö†Ô∏è',
            'critical': 'üö®'
        }
        
        emoji = priority_emoji.get(priority, 'üìä')
        timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        header = f"{emoji} <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–æ–≤</b>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        if account_name:
            header += f" | <code>{account_name}</code>"
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted = f"{header}\n\n{message}\n\n<i>üïí {timestamp} UTC</i>"
        
        return formatted
    
    def notify_sync_failure(
        self, 
        result: SyncResult, 
        account_name: str,
        retry_count: int = 0
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            retry_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        operation_id = str(result.operation_id) if result.operation_id else "unknown"
        
        message = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n"
            f"–ê–∫–∫–∞—É–Ω—Ç: <code>{account_name}</code>\n"
            f"ID –æ–ø–µ—Ä–∞—Ü–∏–∏: <code>{operation_id}</code>\n"
            f"–ü–æ–ø—ã—Ç–∫–∞: {retry_count + 1}\n"
            f"–û—à–∏–±–∫–∞: <i>{result.error}</i>"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫
        if retry_count >= self.config.retry_max_attempts - 1:
            priority = 'critical'
            chat_type = 'critical'
        elif retry_count >= 3:
            priority = 'high' 
            chat_type = 'main'
        else:
            priority = 'normal'
            chat_type = 'main'
        
        self._send_message(message, chat_type, priority, account_name)
    
    def notify_max_retries_reached(
        self, 
        operation_id: UUID,
        account_name: str,
        error_details: str
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫.
        
        Args:
            operation_id: ID –æ–ø–µ—Ä–∞—Ü–∏–∏
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞  
            error_details: –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏
        """
        message = (
            f"üö® <b>–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫</b>\n"
            f"–ê–∫–∫–∞—É–Ω—Ç: <code>{account_name}</code>\n"
            f"ID –æ–ø–µ—Ä–∞—Ü–∏–∏: <code>{str(operation_id)}</code>\n"
            f"–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {self.config.retry_max_attempts}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: <i>{error_details}</i>\n\n"
            f"‚ö° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!</b>"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        if self.session and not self._can_send_order_notification(
            str(operation_id), account_name, 'max_retries'
        ):
            self.logger.info(f"Max retries notification suppressed for operation {operation_id}")
            return
        
        self._send_message(message, 'critical', 'critical', account_name)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if self.session:
            self._record_order_notification(
                str(operation_id), account_name, 'max_retries', suppress_for_hours=24
            )
    
    def notify_stock_validation_failure(
        self, 
        validation_result: StockValidationResult,
        account_name: str,
        order_id: Optional[str] = None
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.
        
        Args:
            validation_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            order_id: ID –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        """
        shortage = validation_result.shortage_quantity
        
        message = (
            f"‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞</b>\n"
            f"–ê–∫–∫–∞—É–Ω—Ç: <code>{account_name}</code>\n"
            f"SKU: <code>{validation_result.sku}</code>\n"
            f"–°–∫–ª–∞–¥: <code>{validation_result.warehouse}</code>\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {validation_result.available_quantity}\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {validation_result.required_quantity}\n"
            f"–ù–µ–¥–æ—Å—Ç–∞–µ—Ç: <b>{shortage}</b>"
        )
        
        if order_id:
            message += f"\n–ó–∞–∫–∞–∑: <code>{order_id}</code>"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—á–∏
        shortage_percent = validation_result.shortage_percentage
        if shortage_percent >= 100:  # –¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
            priority = 'critical'
            chat_type = 'critical'
        elif shortage_percent >= 50:  # –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã
            priority = 'high'
            chat_type = 'main'
        else:
            priority = 'normal'
            chat_type = 'main'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤)
        if self.session and order_id and not self._can_send_order_notification(
            order_id, account_name, 'validation_failure'
        ):
            self.logger.info(f"Validation failure notification suppressed for order {order_id}")
            return
        
        self._send_message(message, chat_type, priority, account_name)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if self.session and order_id:
            self._record_order_notification(
                order_id, account_name, 'validation_failure', suppress_for_hours=6
            )
    
    def notify_reconciliation_discrepancies(
        self, 
        result: ReconciliationResult,
        account_names: List[str]
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–µ—Ä–∫–∏
            account_names: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        accounts_str = ", ".join(account_names) if len(account_names) <= 3 else f"{len(account_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        
        message = (
            f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π</b>\n"
            f"–ê–∫–∫–∞—É–Ω—Ç—ã: <code>{accounts_str}</code>\n"
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {result.total_checked}\n"
            f"–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: <b>{result.discrepancies_found}</b>\n"
            f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {result.auto_fixed}\n"
            f"–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{result.requires_manual_review}</b>"
        )
        
        if result.discrepancies_found > 0:
            priority = 'high' if result.requires_manual_review > 0 else 'normal'
        else:
            priority = 'low'
        
        self._send_message(message, 'tech', priority)
    
    def notify_processing_summary(
        self, 
        result: ProcessingResult
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if result.processed == 0:
            return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –±—ã–ª–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        
        message = (
            f"üìà <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {result.processed}\n"
            f"–£—Å–ø–µ—à–Ω–æ: <b>{result.succeeded}</b>\n"
            f"–ù–µ—É–¥–∞—á–Ω–æ: {result.failed}\n"
            f"–î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫: <b>{result.max_retries_reached}</b>"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —É—Å–ø–µ—Ö–∞
        if result.processed > 0:
            success_rate = (result.succeeded / result.processed) * 100
            if success_rate >= 90:
                priority = 'low'
            elif success_rate >= 70:
                priority = 'normal' 
            else:
                priority = 'high'
        else:
            priority = 'normal'
        
        self._send_message(message, 'tech', priority)
    
    def notify_system_health(
        self, 
        health_data: Dict[str, Any]
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Args:
            health_data: –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        """
        status = health_data.get('health_status', 'unknown')
        pending = health_data.get('pending_operations', 0)
        failed = health_data.get('failed_operations', 0)
        stale = health_data.get('stale_operations', 0)
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = {
            'healthy': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'error': 'üö®',
            'unknown': '‚ùì'
        }
        
        emoji = status_emoji.get(status, '‚ùì')
        
        message = (
            f"{emoji} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n"
            f"–°—Ç–∞—Ç—É—Å: <b>{status.upper()}</b>\n"
            f"–û–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {pending}\n"
            f"–ü—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {failed}\n"
            f"–ó–∞—Å—Ç—Ä—è–≤—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {stale}"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —á–∞—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if status == 'error' or stale > 0:
            priority = 'critical'
            chat_type = 'critical'
        elif status == 'warning' or failed > 10:
            priority = 'high'
            chat_type = 'main'
        else:
            priority = 'low'
            chat_type = 'tech'
        
        self._send_message(message, chat_type, priority)
    
    def notify_daily_summary(
        self, 
        summary_data: Dict[str, Any]
    ):
        """
        –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Args:
            summary_data: –°–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
        """
        completed = summary_data.get('completed_today', 0)
        failed = summary_data.get('failed_operations', 0) 
        accounts_count = summary_data.get('active_accounts', 0)
        
        message = (
            f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n"
            f"–î–∞—Ç–∞: <code>{datetime.utcnow().strftime('%Y-%m-%d')}</code>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: <b>{completed}</b>\n"
            f"‚ùå –ü—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {failed}\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n\n"
            f"üìà –û–±—â–∏–π —É—Å–ø–µ—Ö: <b>{(completed/(completed+failed)*100):.1f}%</b>" 
            if (completed + failed) > 0 else "üìà –û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ"
        )
        
        self._send_message(message, 'tech', 'low')
    
    def notify_custom_alert(
        self, 
        title: str,
        details: str,
        priority: str = 'normal',
        account_name: Optional[str] = None
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            details: –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ('low', 'normal', 'high', 'critical')
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        message = f"<b>{title}</b>\n\n{details}"
        
        # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if priority == 'critical':
            chat_type = 'critical'
        elif priority in ('high', 'normal'):
            chat_type = 'main'
        else:
            chat_type = 'tech'
        
        self._send_message(message, chat_type, priority, account_name)

    def _can_send_order_notification(
        self,
        order_key: str,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å order_id –∏–ª–∏ operation_id
        account_name: str,
        notification_type: str,
        min_interval_minutes: int = 30
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞.
        
        Args:
            order_key: ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            min_interval_minutes: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tracker
            # –î–ª—è operation_id –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å order info, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            stmt = select(OrderNotificationTracker).where(
                OrderNotificationTracker.order_id.contains(order_key) |
                OrderNotificationTracker.account_name == account_name
            ).order_by(OrderNotificationTracker.created_at.desc()).limit(1)
            
            tracker = self.session.exec(stmt).first()
            
            if tracker:
                return tracker.can_send_notification(notification_type, min_interval_minutes)
            else:
                # –ï—Å–ª–∏ tracker –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
                return True
                
        except Exception as e:
            self.logger.error(f"Error checking notification permission: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            return True

    def _record_order_notification(
        self,
        order_key: str,
        account_name: str,
        notification_type: str,
        suppress_for_hours: int = 0
    ):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞.
        
        Args:
            order_key: ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            suppress_for_hours: –ü–æ–¥–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        """
        try:
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π tracker –∫–∞–∂–¥—ã–π —Ä–∞–∑
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            tracker = OrderNotificationTracker(
                token_id="unknown",  # –ü–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ order_key
                order_id=order_key,
                account_name=account_name
            )
            
            tracker.record_notification(notification_type, suppress_for_hours)
            
            self.session.add(tracker)
            self.session.commit()
            
        except Exception as e:
            self.logger.error(f"Error recording notification: {e}")

    def notify_order_validation_failure(
        self,
        token_id: str,
        order_id: str,
        account_name: str,
        validation_errors: List[str],
        order_details: Optional[Dict[str, Any]] = None
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–ø–∞–º–∞.
        
        Args:
            token_id: ID —Ç–æ–∫–µ–Ω–∞
            order_id: ID –∑–∞–∫–∞–∑–∞
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            validation_errors: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            order_details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        """
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º tracker
        order_key = f"{token_id}:{order_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.session:
            tracker = self.session.exec(
                select(OrderNotificationTracker).where(
                    OrderNotificationTracker.token_id == token_id,
                    OrderNotificationTracker.order_id == order_id
                )
            ).first()
            
            if tracker and not tracker.can_send_notification('validation_failure'):
                self.logger.info(f"Validation failure notification suppressed for order {order_key}")
                return
            
            if not tracker:
                tracker = OrderNotificationTracker(
                    token_id=token_id,
                    order_id=order_id,
                    account_name=account_name,
                    order_details=order_details
                )
                self.session.add(tracker)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        errors_text = "\n".join([f"‚Ä¢ {error}" for error in validation_errors[:5]])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –æ—à–∏–±–∫–∞–º–∏
        if len(validation_errors) > 5:
            errors_text += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(validation_errors) - 5} –æ—à–∏–±–æ–∫"
        
        message = (
            f"‚ö†Ô∏è <b>–ü—Ä–æ–≤–∞–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞</b>\n"
            f"–ê–∫–∫–∞—É–Ω—Ç: <code>{account_name}</code>\n"
            f"–ó–∞–∫–∞–∑: <code>{order_id}</code>\n\n"
            f"<b>–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</b>\n{errors_text}\n\n"
            f"üí° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ</i>"
        )
        
        self._send_message(message, 'main', 'high', account_name)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        if self.session and tracker:
            tracker.record_notification('validation_failure', suppress_for_hours=6)
            self.session.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å —Å–µ—Å—Å–∏–µ–π
def get_notification_service(session: Optional[Session] = None) -> StockSyncNotificationService:
    return StockSyncNotificationService(session=session)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
stock_sync_notifications = StockSyncNotificationService()