#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤.
–ó–∞–ø—É—Å–∫: python test_stock_sync_system.py
"""

import sys
import os
import uuid
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from app.database import SessionLocal, engine
    from app.services.stock_synchronization_service import StockSynchronizationService
    from app.services.stock_validation_service import StockValidationService
    from app.services.warehouse.manager import get_manager
    from app.services.Allegro_Microservice.orders_endpoint import OrdersClient
    from app.services.Allegro_Microservice.tokens_endpoint import AllegroTokenMicroserviceClient
    from app.core.security import create_access_token
    from app.core.config import settings
    from app.models.stock_synchronization import PendingStockOperation, StockSynchronizationLog
    from sqlmodel import select
    from sqlalchemy import text
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


class StockSyncSystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    
    def __init__(self):
        self.session = None
        self.sync_service = None
        self.validation_service = None
        self.test_results = []
    
    def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã."""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            self.session = SessionLocal()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            self.session.exec(text("SELECT 1")).first()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            jwt_token = create_access_token(user_id=settings.PROJECT_NAME)
            
            orders_client = OrdersClient(
                jwt_token=jwt_token,
                base_url=settings.MICRO_SERVICE_URL
            )
            
            tokens_client = AllegroTokenMicroserviceClient(
                jwt_token=jwt_token,
                base_url=settings.MICRO_SERVICE_URL
            )
            
            inventory_manager = get_manager()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            self.sync_service = StockSynchronizationService(
                session=self.session,
                orders_client=orders_client,
                tokens_client=tokens_client,
                inventory_manager=inventory_manager
            )
            
            self.validation_service = StockValidationService(
                session=self.session,
                inventory_manager=inventory_manager
            )
            
            print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_database_tables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–ø–µ—Ä–∞—Ü–∏–π
            operations_count = self.session.exec(
                select(PendingStockOperation)
            ).all()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ pendingstockoperation: {len(operations_count)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤
            logs_count = self.session.exec(
                select(StockSynchronizationLog)
            ).all()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ stocksynchronizationlog: {len(logs_count)} –∑–∞–ø–∏—Å–µ–π")
            
            self.test_results.append(("Database Tables", True, "–¢–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã"))
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results.append(("Database Tables", False, error_msg))
            return False
    
    def test_sync_service_creation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        
        try:
            test_token_id = str(uuid.uuid4())
            test_order_id = f"TEST_ORDER_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            test_sku = "TEST_SKU_001"
            
            result = self.sync_service.sync_stock_deduction(
                token_id=test_token_id,
                order_id=test_order_id,
                sku=test_sku,
                quantity=1,
                warehouse="–ò—Ä–∏–Ω–∞"
            )
            
            if result.operation_id:
                print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {result.operation_id}")
                print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.success}")
                print(f"   - –î–µ—Ç–∞–ª–∏: {result.details}")
                
                self.test_results.append(("Sync Operation Creation", True, f"–û–ø–µ—Ä–∞—Ü–∏—è {result.operation_id}"))
                return True
            else:
                error_msg = f"–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: {result.error}"
                print(f"‚ùå {error_msg}")
                self.test_results.append(("Sync Operation Creation", False, error_msg))
                return False
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results.append(("Sync Operation Creation", False, error_msg))
            return False
    
    def test_validation_service(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            validation_result = self.validation_service.validate_stock_deduction(
                sku="TEST_NONEXISTENT_SKU",
                warehouse="–ò—Ä–∏–Ω–∞",
                required_quantity=1
            )
            
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
            print(f"   - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {validation_result.valid}")
            print(f"   - SKU: {validation_result.sku}")
            print(f"   - –î–æ—Å—Ç—É–ø–Ω–æ: {validation_result.available_quantity}")
            print(f"   - –¢—Ä–µ–±—É–µ—Ç—Å—è: {validation_result.required_quantity}")
            if validation_result.error_message:
                print(f"   - –û—à–∏–±–∫–∞: {validation_result.error_message}")
            
            self.test_results.append(("Validation Service", True, "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"))
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results.append(("Validation Service", False, error_msg))
            return False
    
    def test_processing_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        try:
            result = self.sync_service.process_pending_operations(limit=10)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.processed}")
            print(f"   - –£—Å–ø–µ—à–Ω–æ: {result.succeeded}")
            print(f"   - –ù–µ—É–¥–∞—á–Ω–æ: {result.failed}")
            print(f"   - –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫: {result.max_retries_reached}")
            
            self.test_results.append(("Queue Processing", True, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.processed} –æ–ø–µ—Ä–∞—Ü–∏–π"))
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results.append(("Queue Processing", False, error_msg))
            return False
    
    def test_system_statistics(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã."""
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        try:
            stats = self.sync_service.get_sync_statistics()
            
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   - –û–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {stats.get('pending_operations', 0)}")
            print(f"   - –ü—Ä–æ–≤–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {stats.get('failed_operations', 0)}")
            print(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('completed_today', 0)}")
            print(f"   - –ó–∞—Å—Ç—Ä—è–≤—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {stats.get('stale_operations', 0)}")
            print(f"   - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {stats.get('health_status', 'unknown')}")
            
            self.test_results.append(("System Statistics", True, f"–°—Ç–∞—Ç—É—Å: {stats.get('health_status')}"))
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
            print(f"‚ùå {error_msg}")
            self.test_results.append(("System Statistics", False, error_msg))
            return False
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if self.session:
            self.session.close()
            print("‚úÖ –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤")
        print("=" * 70)
        
        if not self.setup():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É")
            return False
        
        tests = [
            self.test_database_tables,
            self.test_validation_service,
            self.test_sync_service_creation,
            self.test_processing_operations,
            self.test_system_statistics,
        ]
        
        for test in tests:
            try:
                test()
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
                self.test_results.append((test.__name__, False, str(e)))
        
        self.print_summary()
        self.cleanup()
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print("\n" + "=" * 70)
        print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        
        passed = 0
        failed = 0
        
        for test_name, success, details in self.test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{status:<12} | {test_name:<25} | {details}")
            
            if success:
                passed += 1
            else:
                failed += 1
        
        print("\n" + "-" * 70)
        print(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        if failed == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("–°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        
        print("=" * 70)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = StockSyncSystemTester()
    tester.run_all_tests()


if __name__ == "__main__":
    main()